var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.162,1,1.94]],["body/controllers/AppController.html",[0,1.907,1,3.183,2,1.559,3,0.554,4,0.484,5,0.484,6,3.423,7,0.678,8,0.036,9,1.068,10,2.761,11,3.423,12,0.554,13,0.024,14,2.602,15,1.889,16,0.03,17,0.03]],["title/modules/AppModule.html",[18,1.162,19,1.94]],["body/modules/AppModule.html",[1,2.945,2,1.546,3,0.401,4,0.351,5,0.351,7,0.73,8,0.036,9,0.773,10,2.751,11,2.478,12,0.401,13,0.018,16,0.024,17,0.024,18,1.764,19,3.733,20,1.367,21,1.367,22,1.681,23,1.681,24,1.367,25,2.628,26,1.681,27,2.478,28,2.478,29,2.478,30,2.751,31,3.058,32,2.488,33,2.303,34,1.681,35,1.681,36,2.995,37,2.581,38,2.995,39,2.995,40,2.995,41,2.995]],["title/injectables/AppService.html",[10,1.557,42,1.162]],["body/injectables/AppService.html",[3,0.532,4,0.465,5,0.465,7,0.532,8,0.036,9,1.024,10,2.491,12,0.532,13,0.023,16,0.029,17,0.029,42,1.859,43,2.228,44,3.284,45,0.756,46,2.491,47,5.615,48,1.128,49,3.968,50,2.004,51,2.044,52,2.004,53,3.968,54,3.968]],["title/controllers/AuthController.html",[0,1.162,55,1.94]],["body/controllers/AuthController.html",[0,1.542,2,1.542,3,0.548,4,0.479,5,0.479,7,0.674,8,0.036,9,1.057,12,0.548,13,0.024,14,2.575,15,1.869,16,0.03,17,0.03,55,3.163,56,3.387,57,2.922,58,4.093,59,2.485,60,3.387,61,4.093]],["title/modules/AuthModule.html",[18,1.162,30,1.557]],["body/modules/AuthModule.html",[2,1.641,3,0.438,4,0.383,5,0.383,7,0.7,8,0.036,9,0.844,12,0.438,13,0.019,16,0.026,17,0.026,18,1.845,20,1.493,21,1.493,22,1.836,23,1.836,24,1.493,25,2.748,26,2.748,30,2.882,32,1.989,33,2.445,34,1.836,35,1.836,37,2.057,55,3.08,59,2.748,60,2.706,62,2.706,63,2.706,64,2.706,65,3.271,66,2.74,67,2.706,68,3.271]],["title/injectables/AuthService.html",[42,1.162,59,1.408]],["body/injectables/AuthService.html",[3,0.356,4,0.311,5,0.311,7,0.506,8,0.037,9,0.686,12,0.356,13,0.016,15,1.214,16,0.022,17,0.022,42,1.423,43,1.492,45,0.506,46,1.907,48,1.248,50,1.907,51,2.325,52,2.217,59,1.724,66,1.672,69,2.2,70,3.301,71,3.957,72,3.776,73,2.696,74,2.2,75,2.093,76,2.658,77,2.12,78,1.907,79,0.975,80,1.565,81,3.634,82,2.658,83,2.658,84,3.776,85,3.135,86,2.658,87,1.898,88,2.414,89,4.392,90,2.658,91,2.2,92,2.2,93,2.2,94,2.2,95,1.898,96,1.672,97,3.776,98,2.658,99,2.658,100,1.672,101,2.658,102,1.898,103,2.658,104,2.2]],["title/classes/CreatePostDto.html",[13,0.018,105,1.731]],["body/classes/CreatePostDto.html",[3,0.157,4,0.137,5,0.137,7,0.496,8,0.036,12,0.157,13,0.015,16,0.012,17,0.012,45,0.223,48,1.271,51,2.153,79,1.369,80,1.955,88,1.001,104,2.817,105,1.113,106,0.485,107,3.286,108,0.835,109,0.973,110,4.321,111,3.404,112,2.582,113,3.905,114,2.582,115,3.404,116,3.942,117,2.968,118,3.404,119,4.065,120,1.853,121,2.582,122,2.917,123,2.155,124,2.373,125,1.17,126,1.17,127,1.983,128,1.983,129,4.147,130,1.17,131,1.17,132,1.913,133,1.17,134,3.698,135,1.641,136,1.641,137,1.983,138,1.17,139,1.17,140,1.17,141,2.517,142,3.041,143,3.041,144,1.416,145,1.641,146,1.17,147,1.17,148,3.041,149,1.641,150,2.137,151,1.983,152,1.983,153,1.17,154,1.17,155,1.983,156,1.983,157,2.582,158,1.983,159,1.983,160,1.17,161,1.17,162,1.17,163,3.041,164,3.041,165,1.983,166,1.983,167,1.983,168,1.983,169,1.983,170,2.582,171,1.17,172,1.641,173,1.641,174,1.641,175,1.17,176,1.17,177,1.983,178,1.983,179,1.17,180,1.17,181,3.041,182,1.17,183,1.983,184,1.641,185,1.17,186,1.17,187,1.17,188,2.43,189,2.141,190,2.48,191,0.968,192,0.968,193,1.983,194,1.983,195,1.983,196,2.582,197,1.983,198,0.534,199,0.835,200,1.17,201,1.17,202,1.17,203,1.17,204,0.835,205,1.416,206,1.17,207,2.817,208,3.262,209,0.591,210,0.968,211,1.17,212,0.968,213,1.17,214,1.17,215,1.17,216,1.17,217,1.17,218,1.17,219,1.17,220,0.968,221,0.968,222,2.137,223,0.968,224,1.17,225,1.17,226,1.248,227,0.968,228,1.17]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.018,132,1.94]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.483,4,0.422,5,0.422,7,0.483,8,0.035,12,0.483,13,0.027,16,0.027,17,0.027,45,0.686,48,1.318,51,1.922,79,1.198,106,1.493,107,3.664,109,1.748,120,1.922,123,2.343,132,2.919,188,3.312,189,3.41,198,1.645,205,3.664,222,4.247,226,3.229,229,2.981,230,3.602,231,3.602,232,3.602]],["title/classes/CreateUserDto.html",[13,0.018,233,1.557]],["body/classes/CreateUserDto.html",[3,0.269,4,0.235,5,0.235,7,0.269,8,0.036,12,0.412,13,0.018,16,0.018,17,0.018,45,0.382,48,1.278,51,2.243,78,2.687,79,1.224,85,3.523,87,3.386,88,2.862,100,1.932,106,0.832,109,1.157,120,1.864,188,2.98,189,2.829,190,1.932,191,1.662,192,1.662,198,0.917,210,4.083,221,2.541,233,1.882,234,3.386,235,1.264,236,3.085,237,2.093,238,3.085,239,3.728,240,2.009,241,4.175,242,3.728,243,2.009,244,3.728,245,4.743,246,2.009,247,2.009,248,4.175,249,2.009,250,1.906,251,2.009,252,2.009,253,4.175,254,2.009,255,2.009,256,2.009,257,4.175,258,2.009,259,3.071,260,3.071,261,3.071,262,4.743,263,3.071,264,4.175,265,3.071,266,3.071,267,3.071,268,2.009,269,3.071,270,2.009,271,2.009,272,1.264]],["title/classes/GetPostsParamDto.html",[13,0.018,273,1.94]],["body/classes/GetPostsParamDto.html",[3,0.516,4,0.451,5,0.451,7,0.516,8,0.035,12,0.516,13,0.028,16,0.028,17,0.028,45,0.733,48,1.094,79,0.994,80,2.006,106,1.596,109,1.824,120,1.596,190,3.045,198,1.758,250,2.21,273,3.045,274,4.006,275,3.456,276,2.423,277,4.381,278,3.851,279,3.851,280,3.456]],["title/classes/GetUsersParamDto.html",[13,0.018,281,1.731]],["body/classes/GetUsersParamDto.html",[3,0.446,4,0.39,5,0.39,7,0.662,8,0.036,12,0.59,13,0.029,16,0.026,17,0.026,45,0.633,48,0.945,79,1.357,80,1.825,106,1.378,109,1.659,120,1.378,122,2.472,124,1.519,149,2.753,190,2.771,198,1.519,199,2.375,208,3.645,209,1.679,237,3.069,250,2.255,276,2.092,280,3.144,281,2.772,282,3.144,283,2.224,284,2.771,285,4.404,286,3.326,287,3.326,288,2.092,289,2.375]],["title/classes/PatchPostDto.html",[13,0.018,290,1.94]],["body/classes/PatchPostDto.html",[3,0.44,4,0.385,5,0.385,7,0.657,8,0.036,12,0.44,13,0.026,16,0.026,17,0.026,45,0.625,48,0.933,79,1.267,105,1.844,106,1.361,108,2.345,109,1.646,119,2.718,120,1.361,122,2.451,123,1.994,124,1.994,141,2.718,189,2.747,198,1.5,204,2.345,207,3.614,209,1.658,237,3.207,250,1.994,280,3.118,288,2.066,290,2.747,291,3.614,292,3.614,293,4.367,294,4.367,295,4.367,296,4.367,297,3.284,298,3.284,299,2.718,300,2.718]],["title/classes/PatchUserDto.html",[13,0.018,301,1.94]],["body/classes/PatchUserDto.html",[3,0.551,4,0.482,5,0.482,7,0.676,8,0.036,12,0.551,13,0.024,16,0.03,17,0.03,106,1.705,204,2.938,233,2.078,235,2.588,292,4.174,299,3.405,301,3.173,302,3.405,303,5.044,304,3.405,305,3.405,306,2.938]],["title/modules/PostModule.html",[18,1.162,31,1.731]],["body/modules/PostModule.html",[2,1.659,3,0.446,4,0.39,5,0.39,7,0.704,8,0.036,9,0.859,12,0.446,13,0.02,16,0.026,17,0.026,18,1.86,20,1.519,21,1.519,22,1.867,23,1.867,24,1.519,25,2.772,26,1.867,31,3.266,32,2.565,33,2.472,34,1.867,35,1.867,37,2.771,67,2.753,307,2.753,308,3.326,309,2.753,310,2.837,311,3.326,312,3.106,313,3.326,314,2.753]],["title/controllers/PostsController.html",[0,1.162,312,1.94]],["body/controllers/PostsController.html",[0,0.771,2,0.771,3,0.274,4,0.24,5,0.24,7,0.64,8,0.036,9,0.528,12,0.274,13,0.012,14,1.287,15,0.934,16,0.018,17,0.018,45,0.39,46,1.572,48,1.071,50,2.507,52,1.904,57,1.46,70,3.005,77,2.116,78,1.904,79,0.973,80,1.562,102,2.223,105,2.873,117,3.005,120,1.562,123,2.337,124,1.924,209,1.033,273,3.005,275,2.223,290,3.298,300,2.577,310,1.904,312,1.959,314,1.693,315,1.693,316,3.114,317,2.223,318,3.114,319,2.046,320,3.114,321,3.114,322,2.223,323,3.114,324,4.214,325,3.487,326,2.577,327,2.046,328,2.046,329,3.114,330,2.046,331,3.114,332,2.046,333,2.046,334,3.114,335,3.114,336,3.487,337,2.577,338,2.046,339,2.046,340,1.693,341,1.693,342,2.577,343,3.12,344,3.12,345,1.693,346,1.693,347,1.693,348,1.46,349,1.693,350,2.046,351,2.046,352,2.046,353,2.046,354,2.577,355,2.046,356,2.046]],["title/injectables/PostsService.html",[42,1.162,310,1.557]],["body/injectables/PostsService.html",[3,0.411,4,0.359,5,0.359,7,0.559,8,0.037,9,0.791,12,0.411,13,0.018,15,1.4,16,0.024,17,0.024,42,1.571,43,1.721,45,0.584,46,2.105,48,1.185,50,1.548,51,1.27,52,2.105,73,2.976,74,2.537,75,2.107,77,2.34,78,2.105,79,1.076,80,1.727,81,3.45,88,2.392,92,2.537,95,2.188,96,1.928,250,2.163,277,2.537,283,1.548,284,3.199,310,2.105,317,2.976,357,2.537,358,3.065,359,4.169,360,3.065,361,3.065,362,3.065,363,3.065,364,3.065,365,3.065]],["title/controllers/UsersController.html",[0,1.162,366,1.94]],["body/controllers/UsersController.html",[0,0.617,2,0.617,3,0.22,4,0.192,5,0.192,7,0.584,8,0.036,9,0.423,12,0.22,13,0.01,14,1.031,15,0.748,16,0.015,17,0.015,45,0.312,46,1.322,48,0.929,50,1.651,51,1.085,52,2.199,57,1.17,70,3.08,75,1.355,77,1.836,78,2.062,79,1.18,80,1.355,88,1.886,96,1.031,100,1.647,102,2.667,117,1.647,120,1.355,122,2.097,123,1.493,124,2.168,135,3.091,136,3.091,144,3.264,209,0.827,227,2.167,233,2.199,237,1.47,250,2.453,281,2.097,283,2.199,284,2.35,288,1.647,301,3.08,306,1.869,322,1.869,325,1.356,326,1.356,336,2.167,337,1.356,340,1.356,341,2.167,342,2.706,343,2.167,344,2.706,345,1.356,346,1.356,347,1.356,348,1.17,349,1.356,354,1.356,366,1.647,367,1.356,368,2.618,369,3.27,370,2.618,371,1.638,372,1.638,373,1.638,374,4.084,375,1.638,376,2.618,377,2.618,378,2.618,379,1.638,380,2.618,381,3.735,382,1.638,383,2.618,384,2.618,385,1.638,386,2.618,387,2.618,388,2.618,389,3.27,390,1.638,391,2.618,392,2.618,393,1.638,394,2.618,395,1.638,396,1.638,397,1.638,398,3.27,399,3.27,400,1.356,401,1.638,402,1.638,403,1.638,404,1.638,405,1.356,406,1.638,407,1.638,408,1.638,409,1.638,410,1.638,411,1.638,412,1.638,413,2.618,414,1.638,415,1.638,416,1.638]],["title/modules/UsersModule.html",[18,1.162,32,1.408]],["body/modules/UsersModule.html",[2,1.641,3,0.438,4,0.383,5,0.383,7,0.7,8,0.036,9,0.844,12,0.438,13,0.019,16,0.026,17,0.026,18,1.845,20,1.493,21,1.493,22,1.836,23,1.836,24,1.493,25,2.748,26,2.748,30,2.199,32,2.606,33,2.445,34,1.836,35,1.836,37,2.057,66,2.74,75,2.494,366,3.08,400,2.706,417,2.706,418,2.706,419,2.706,420,3.271,421,3.271,422,3.271]],["title/injectables/UsersService.html",[42,1.162,75,1.278]],["body/injectables/UsersService.html",[3,0.278,4,0.243,5,0.243,7,0.509,8,0.037,9,0.535,12,0.278,13,0.012,15,0.946,16,0.018,17,0.018,42,1.185,43,1.164,45,0.395,46,1.588,48,1.296,50,1.919,51,1.575,52,2.142,59,2.347,66,1.304,70,3.311,71,2.603,73,2.245,75,1.303,77,2.133,78,1.919,79,1.095,80,1.575,85,3.029,87,3.428,88,1.047,91,1.715,93,1.715,94,1.715,95,3.029,96,1.304,100,1.304,109,1.185,226,1.304,236,3.511,237,2.695,238,3.511,250,1.735,272,2.391,283,1.919,284,1.304,288,1.979,306,1.48,317,3.029,348,1.48,423,1.715,424,3.145,425,3.145,426,2.073,427,2.073,428,2.073,429,3.145,430,2.073,431,3.145,432,2.073,433,2.073,434,3.145,435,4.243,436,4.243,437,4.243,438,3.145,439,3.145,440,2.073,441,2.073,442,2.073,443,2.073,444,3.145,445,2.073,446,2.073]],["title/coverage.html",[447,2.989]],["body/coverage.html",[0,1.799,1,1.667,5,0.31,6,2.192,8,0.036,10,1.338,13,0.032,16,0.022,17,0.022,24,1.21,42,1.799,44,2.192,55,1.667,56,2.192,59,1.21,69,2.192,75,1.098,79,1.132,105,1.487,107,2.689,108,2.689,123,1.21,132,1.667,205,1.891,223,2.192,229,2.192,233,1.338,234,2.689,235,2.758,272,1.667,273,1.667,274,2.192,275,1.891,276,2.758,281,1.487,282,2.689,283,1.902,289,1.891,290,1.667,291,2.192,301,1.667,302,2.192,310,1.338,312,1.667,315,2.192,322,1.891,357,2.192,366,1.667,367,2.192,405,2.192,423,2.192,447,1.891,448,2.649,449,6.027,450,5.241,451,4.774,452,4.383,453,2.192,454,2.649,455,3.767,456,2.649,457,3.767,458,3.767,459,2.649,460,2.649]],["title/dependencies.html",[21,1.691,461,2.14]],["body/dependencies.html",[8,0.036,9,1.035,13,0.029,16,0.029,17,0.029,21,1.831,198,1.831,199,2.862,209,2.024,304,3.318,305,3.318,462,5.392,463,4.009,464,4.009,465,4.009,466,4.009,467,4.009,468,4.009,469,4.009,470,4.009,471,4.009,472,4.009,473,4.009,474,4.009]],["title/miscellaneous/enumerations.html",[475,1.306,476,3.064]],["body/miscellaneous/enumerations.html",[8,0.036,16,0.028,17,0.028,45,0.726,113,3.981,117,3.027,123,2.197,144,3.435,145,3.981,150,3.981,172,3.981,173,3.981,174,3.981,212,3.981,226,3.765,475,1.925,476,3.156,477,3.813,478,3.813,479,3.813,480,3.813]],["title/miscellaneous/functions.html",[475,1.306,481,3.064]],["body/miscellaneous/functions.html",[8,0.032,16,0.032,17,0.032,24,2.612,45,0.876,453,3.806,475,2.322,481,3.806,482,4.599]],["title/index.html",[45,0.492,483,2.586,484,2.586]],["body/index.html",[4,0.356,8,0.036,16,0.024,17,0.024,122,2.649,124,1.389,220,2.517,447,2.171,485,3.041,486,3.041,487,4.147,488,3.041,489,3.041,490,3.041,491,3.041,492,3.041,493,3.041,494,4.719,495,3.041,496,3.041,497,3.041,498,5.602,499,3.041,500,3.041,501,3.041,502,5.474,503,3.041,504,3.041,505,4.147,506,3.041,507,3.041,508,3.041,509,3.041,510,4.147,511,4.147,512,3.041,513,3.041,514,3.041,515,4.147,516,4.147,517,3.041,518,3.041,519,3.041,520,3.041,521,3.041,522,2.517,523,3.041,524,3.041,525,3.041,526,3.041,527,3.041,528,3.041,529,3.041,530,3.041,531,3.041,532,3.041,533,2.517,534,3.041,535,3.041,536,3.041,537,3.041,538,3.041,539,3.041,540,2.517]],["title/modules.html",[20,1.912]],["body/modules.html",[8,0.03,16,0.03,17,0.03,19,2.688,20,1.951,30,2.157,31,2.398,32,1.951,522,4.766,541,5.76,542,5.76,543,5.76]],["title/overview.html",[544,3.464]],["body/overview.html",[2,1.164,8,0.035,10,2.402,16,0.025,17,0.025,18,1.164,19,3.69,20,1.411,21,1.411,22,1.734,23,1.734,24,1.411,25,1.734,26,1.734,27,2.557,28,2.557,29,2.557,30,2.777,31,3.157,32,2.568,33,2.353,34,1.734,35,1.734,43,1.734,59,2.568,62,2.557,63,2.557,64,2.557,75,2.331,106,1.28,184,3.937,307,2.557,309,2.557,310,2.402,417,2.557,418,2.557,419,2.557,544,2.557,545,3.089]],["title/properties.html",[109,1.395,461,2.14]],["body/properties.html",[8,0.036,16,0.031,17,0.031,109,1.703,124,2.064,533,3.74,540,3.74,546,4.519,547,4.519,548,4.519]],["title/miscellaneous/typealiases.html",[475,1.306,549,3.703]],["body/miscellaneous/typealiases.html",[8,0.03,16,0.03,17,0.03,45,0.818,79,1.109,233,2.169,234,3.067,235,3.257,272,3.257,276,3.257,281,2.411,282,3.067,283,2.614,289,3.697,475,2.169,550,4.296,551,4.296,552,4.296]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":547,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":288,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1'})@isoptional()@isint()@type(undefined",{"_index":286,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["10",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["16",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16'})@isoptional()@isiso8601",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@isint()@isnotempty",{"_index":297,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["2",{"_index":439,"title":{},"body":{"injectables/UsersService.html":{}}}],["2.0.6",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["4",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["400",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["7",{"_index":545,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.1.0",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alias",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":550,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":523,"title":{},"body":{"index.html":{}}}],["api",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({title",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({title",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({type",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":345,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":351,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":500,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["application.'})@apiresponse({status",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":493,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":55,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":533,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorized",{"_index":365,"title":{},"body":{"injectables/PostsService.html":{}}}],["authservice",{"_index":59,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["awesome",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["backers",{"_index":524,"title":{},"body":{"index.html":{}}}],["based",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["blog",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["body",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":543,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":541,"title":{},"body":{"modules.html":{}}}],["building",{"_index":488,"title":{},"body":{"index.html":{}}}],["can't",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["character",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["characters'})@isstring()@minlength(4)@isnotempty",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["characters'})@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":63,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":64,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":307,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":308,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":309,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":417,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":418,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":419,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["const",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["constructor(userservice",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":447,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["createpost",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":355,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":105,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":132,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuser",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":233,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["credentials",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["defaultvaluepipe",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":501,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["documentation'})@apiresponse({status",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["draft",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dtos/create",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":346,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":512,"title":{},"body":{"index.html":{}}}],["each",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":489,"title":{},"body":{"index.html":{}}}],["email",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["email'})@isnotempty({message",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["empty",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["empty'})@minlength(3",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["entries",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":476,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/status.enum",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":292,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetched",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(@param",{"_index":352,"title":{},"body":{"controllers/PostsController.html":{}}}],["findall(getpostsparamdto",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["findall(userid",{"_index":359,"title":{},"body":{"injectables/PostsService.html":{}}}],["findone",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(id",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["firstname",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["following",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forwardref",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":487,"title":{},"body":{"index.html":{}}}],["function",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":481,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":47,"title":{},"body":{"injectables/AppService.html":{}}}],["getpostsparamdto",{"_index":273,"title":{"classes/GetPostsParamDto.html":{}},"body":{"classes/GetPostsParamDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["getting",{"_index":483,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(params",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":281,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["grow",{"_index":519,"title":{},"body":{"index.html":{}}}],["hello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":530,"title":{},"body":{"index.html":{}}}],["hit",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isurl",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":537,"title":{},"body":{"index.html":{}}}],["id",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":42,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":43,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":361,"title":{},"body":{"injectables/PostsService.html":{}}}],["injecting",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["installation",{"_index":497,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":499,"title":{},"body":{"index.html":{}}}],["integer",{"_index":294,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["invalid",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isarray",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":71,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(status",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":280,"title":{},"body":{"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isnumber",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isint",{"_index":278,"title":{},"body":{"classes/GetPostsParamDto.html":{}}}],["isstring",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":230,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring({message",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isuser",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["items",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["join",{"_index":526,"title":{},"body":{"index.html":{}}}],["json",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":534,"title":{},"body":{"index.html":{}}}],["key",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["last",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lastname",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":540,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":516,"title":{},"body":{"index.html":{}}}],["limit",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["list",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["logged",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{}}}],["lowercase",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["message",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["meta",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":475,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":515,"title":{},"body":{"index.html":{}}}],["mode",{"_index":505,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":529,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":535,"title":{},"body":{"index.html":{}}}],["name",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["needed",{"_index":295,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":494,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":539,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":304,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":486,"title":{},"body":{"index.html":{}}}],["npm",{"_index":498,"title":{},"body":{"index.html":{}}}],["number",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["one",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":517,"title":{},"body":{"index.html":{}}}],["option",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":229,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":231,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":232,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":544,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":461,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":276,"title":{},"body":{"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["param.dto.ts:10",{"_index":287,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["param.dto.ts:6",{"_index":279,"title":{},"body":{"classes/GetPostsParamDto.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["params.id",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["partialtype",{"_index":299,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":293,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":303,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpost",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpost(@body",{"_index":356,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpost(patchpostdto",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":290,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":301,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["please",{"_index":527,"title":{},"body":{"index.html":{}}}],["position",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["post",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isoptional()@isstring",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":300,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:109",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:134",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":298,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:34",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:43",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:55",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:64",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:73",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:81",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:90",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:98",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postmodule",{"_index":31,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postpostsbodydto",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts",{"_index":275,"title":{},"body":{"classes/GetPostsParamDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["posts.controller",{"_index":313,"title":{},"body":{"modules/PostModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":312,"title":{"controllers/PostsController.html":{}},"body":{"modules/PostModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["postsservice",{"_index":310,"title":{"injectables/PostsService.html":{}},"body":{"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["posttype",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":507,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":485,"title":{},"body":{"index.html":{}}}],["project",{"_index":518,"title":{},"body":{"index.html":{}}}],["properties",{"_index":109,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":314,"title":{},"body":{"modules/PostModule.html":{},"controllers/PostsController.html":{}}}],["providers/users.service",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":70,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(status)@isnotempty",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["read",{"_index":528,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":496,"title":{},"body":{"index.html":{}}}],["request",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["request'})@apiquery({name",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":502,"title":{},"body":{"index.html":{}}}],["rupani",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["rxjs",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["sadiq@123",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["sadiqhasan",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["sadiqhasanrupani11@gmail.com",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["save",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":490,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["secret_token",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["serialize",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":491,"title":{},"body":{"index.html":{}}}],["service",{"_index":362,"title":{},"body":{"injectables/PostsService.html":{}}}],["side",{"_index":492,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sidika",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":285,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":521,"title":{},"body":{"index.html":{}}}],["src/.../create",{"_index":551,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../get",{"_index":552,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":482,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":477,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":478,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":44,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":422,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":441,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":69,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:14",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:24",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":453,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":274,"title":{},"body":{"classes/GetPostsParamDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":291,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":479,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/status.enum.ts",{"_index":480,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:16",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:28",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:42",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":311,"title":{},"body":{"modules/PostModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":357,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:13",{"_index":360,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":358,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/dtos/get",{"_index":282,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/dtos/patch",{"_index":302,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:15",{"_index":440,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:32",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:41",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:45",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:6",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:33",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:47",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":420,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":503,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":506,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":508,"title":{},"body":{"index.html":{}}}],["started",{"_index":484,"title":{"index.html":{}},"body":{}}],["starter",{"_index":495,"title":{},"body":{"index.html":{}}}],["statements",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["stay",{"_index":531,"title":{},"body":{"index.html":{}}}],["story",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["string'})@isnotempty()@minlength(8",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["string'})@isnotempty({message",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["string'})@isoptional()@minlength(3",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["successfully",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully.'})@patch",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully.'})@post",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":354,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":522,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":542,"title":{},"body":{"modules.html":{}}}],["table",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["test",{"_index":511,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":514,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":513,"title":{},"body":{"index.html":{}}}],["tests",{"_index":510,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":520,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":442,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.findall(getpostsparamdto.userid",{"_index":353,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.users",{"_index":443,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.users.find((user",{"_index":444,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.findone(userid",{"_index":363,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.userservice.findonebyemail(email",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findall",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(params.id",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["thrown",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["thrown'})@isoptional()@isjson",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["title",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["token",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":532,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":538,"title":{},"body":{"index.html":{}}}],["type",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":549,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":305,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["unauthorized",{"_index":364,"title":{},"body":{"injectables/PostsService.html":{}}}],["undefined",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":509,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":548,"title":{},"body":{"properties.html":{}}}],["update",{"_index":296,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updated",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["updates",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["uppercase",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url''})@isstring()@isnotempty()@matches(/^[a",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":284,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":306,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["user.dto.ts:15",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:20",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":446,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.id",{"_index":445,"title":{},"body":{"injectables/UsersService.html":{}}}],["userbody",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":277,"title":{},"body":{"classes/GetPostsParamDto.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":283,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["users.controller",{"_index":421,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":366,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersparam",{"_index":289,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["usersservice",{"_index":75,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":546,"title":{},"body":{"properties.html":{}}}],["want",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":504,"title":{},"body":{"index.html":{}}}],["website",{"_index":536,"title":{},"body":{"index.html":{}}}],["without",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["world",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":525,"title":{},"body":{"index.html":{}}}],["z",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z0",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z])(?=.*[a",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\nimport { UsersModule } from './users/users.module';\nimport { PostModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\n\nimport { UsersModule } from 'src/users/users.module';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\n\n@Module({\n  imports: [forwardRef(() => UsersModule)],\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { message: string; token?: undefined; } | { message: string; token: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    /*\n     * Injecting UserService\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly userService: UsersService,\n  ) {}\n\n  public login(email: string, password: string) {\n    const isUser = this.userService.findOneByEmail(email);\n\n    if (!isUser) {\n      return { message: 'Credentials are invalid' };\n    }\n\n    return { message: 'Logged in successfully.', token: 'SECRET_TOKEN' };\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({title: 'content', example: 'The post content', description: 'This is the content of the post'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({title: 'featuredImageUrl', description: 'Featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'postType', enum: postType, description: 'postType must be the following: 'post', 'page', 'story', 'series''})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16'})@IsOptional()@IsISO8601()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({title: 'schema', description: 'Serialize your JSON object else a validation error will be thrown'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'slug', example: 'my-blog-post', description: 'For example: 'my-url''})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only '-' and without spaces. For example 'my-url''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'status', enum: status, description: 'status must be the following: 'draft', 'scheduled', 'review', 'published''})@IsEnum(status)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string values', type: 'array', example: undefined})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'title', example: 'Awesome blog', type: 'string', description: 'title should have at least 4 characters'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEnum,\n  IsString,\n  IsNotEmpty,\n  IsOptional,\n  MinLength,\n  Matches,\n  IsJSON,\n  IsUrl,\n  IsISO8601,\n  IsArray,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\n// enums\nimport { postType } from '../enums/postType.enum';\nimport { status } from '../enums/status.enum';\n\n// dto\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    title: 'title',\n    example: 'Awesome blog',\n    type: 'string',\n    description: 'title should have at least 4 characters',\n  })\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    title: 'postType',\n    enum: postType,\n    description: \"postType must be the following: 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    title: 'slug',\n    example: 'my-blog-post',\n    description: \"For example: 'my-url'\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(-[a-z0-9]+)*$/, {\n    message: \"A slug should be all small letters and uses only '-' and without spaces. For example 'my-url'\",\n  })\n  slug: string;\n\n  @ApiProperty({\n    title: 'status',\n    enum: status,\n    description: \"status must be the following: 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(status)\n  @IsNotEmpty()\n  status: status;\n\n  @ApiPropertyOptional({\n    title: 'content',\n    example: 'The post content',\n    description: 'This is the content of the post',\n  })\n  @IsOptional()\n  @IsString()\n  content?: string;\n\n  @ApiPropertyOptional({\n    title: 'schema',\n    description: 'Serialize your JSON object else a validation error will be thrown',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    title: 'featuredImageUrl',\n    description: 'Featured image for your blog post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-03-16',\n  })\n  @IsOptional()\n  @IsISO8601()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as string values',\n    type: 'array',\n    example: ['nestJs', 'typescript'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description: 'The key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'Any value that you want to save to the key',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {message: 'Invalid email'})@IsNotEmpty({message: 'Email can't be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'First name must be a string'})@IsNotEmpty({message: 'First name can't be empty'})@MinLength(3, {message: 'First name must be at least 3 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'Last name must be a string'})@IsOptional()@MinLength(3, {message: 'Last name must be at least 3 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'Password must be a string'})@IsNotEmpty()@MinLength(8, {message: 'Password must be at least 8 characters'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Minimum 8 characters, at least one uppercase letter, one lowercase letter and one number or special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  MinLength,\n  Matches,\n  IsNumber,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString({ message: 'First name must be a string' })\n  @IsNotEmpty({ message: \"First name can't be empty\" })\n  @MinLength(3, { message: 'First name must be at least 3 characters' })\n  firstName: string;\n\n  @IsString({ message: 'Last name must be a string' })\n  @IsOptional()\n  @MinLength(3, { message: 'Last name must be at least 3 characters' })\n  lastName: string;\n\n  @IsEmail({}, { message: 'Invalid email' })\n  @IsNotEmpty({ message: \"Email can't be empty\" })\n  email: string;\n\n  @IsString({ message: 'Password must be a string' })\n  @IsNotEmpty()\n  @MinLength(8, { message: 'Password must be at least 8 characters' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message:\n      'Minimum 8 characters, at least one uppercase letter, one lowercase letter and one number or special character',\n  })\n  password: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  id: number;\n}\n\nexport type UserBody = CreateUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsParamDto.html":{"url":"classes/GetPostsParamDto.html","title":"class - GetPostsParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts-param.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsInt } from 'class-validator';\n\nexport class GetPostsParamDto {\n  @IsOptional()\n  @IsInt()\n  userId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user specific id', example: '1'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({ description: 'Get user specific id', example: '1' })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\nexport type UsersParam = GetUsersParamDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'id', type: 'integer', description: 'The 'id' of the post that needed to update', example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    title: 'id',\n    type: 'integer',\n    description: \"The 'id' of the post that needed to update\",\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostModule -->\n\nPostsService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { UsersModule } from 'src/users/users.module';\n\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                patchPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: 201, description: 'This request returns 201 status when a post created successfully.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { postPostsBodyDto: CreatePostDto; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getPostsParamDto: GetPostsParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getPostsParamDto\n                                            \n                                                            GetPostsParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        patchPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchPost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a existing post'})@ApiResponse({status: 200, description: 'This request returns 200 status when a post is updated successfully.'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { patchPostDto: PatchPostDto; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { PostsService } from './providers/posts.service';\n\nimport { GetPostsParamDto } from './dtos/get-posts-param.dto';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId?')\n  findAll(@Param() getPostsParamDto: GetPostsParamDto) {\n    return this.postsService.findAll(getPostsParamDto.userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'This request returns 201 status when a post created successfully.',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return {\n      postPostsBodyDto: createPostDto,\n    };\n  }\n\n  @ApiOperation({\n    summary: 'Updates a existing post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'This request returns 200 status when a post is updated successfully.',\n  })\n  @Patch()\n  public patchPost(@Body() patchPostDto: PatchPostDto) {\n    return {\n      patchPostDto,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { message: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /*\n     * Injected Users Service\n     */\n    private readonly userService: UsersService,\n  ) { }\n\n  findAll(userId: number) {\n    const user = this.userService.findOne(userId);\n\n    if (!user) {\n      return {\n        message: 'Unauthorized user',\n      };\n    }\n\n    return {\n      message: 'Authorized user',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { message: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(params: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application.'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the documentation'})@ApiResponse({status: 400, description: 'Invalid user id will hit a based request'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { message: string; patchUserDto: PatchUserDto; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Get, Param, ParseIntPipe, Patch, Post, Query } from '@nestjs/common';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { UsersService } from './providers/users.service';\n\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('/:id?')\n  @ApiOperation({ summary: 'Fetches a list of registered users on the application.' })\n  @ApiResponse({ status: 200, description: 'Users fetched successfully based on the documentation' })\n  @ApiResponse({ status: 400, description: 'Invalid user id will hit a based request' })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() params: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    if (params.id) {\n      return this.usersService.findOne(params.id);\n    }\n\n    const response = this.usersService.findAll();\n    return response;\n  }\n\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    return {\n      message: 'User created successfully',\n    };\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return {\n      message: 'User updated successfully',\n      patchUserDto,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\n\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [forwardRef(() => AuthModule)],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOne\n                            \n                            \n                                    Public\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserBody[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      firstName: 'Sadiqhasan',\n      lastName: 'Rupani',\n      email: 'sadiqhasanrupani11@gmail.com',\n      password: 'Sadiq@123',\n      id: 1,\n    },\n    {\n      firstName: 'Sidika',\n      lastName: 'Rupani',\n      email: 'sadiqhasanrupani11@gmail.com',\n      password: 'Sadiq@123',\n      id: 2,\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/users/providers/users.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UserBody } from '../dtos/create-user.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    /*\n     * Injecting AuthService\n     */\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  private users: UserBody[] = [\n    {\n      firstName: 'Sadiqhasan',\n      lastName: 'Rupani',\n      email: 'sadiqhasanrupani11@gmail.com',\n      password: 'Sadiq@123',\n      id: 1,\n    },\n    {\n      firstName: 'Sidika',\n      lastName: 'Rupani',\n      email: 'sadiqhasanrupani11@gmail.com',\n      password: 'Sadiq@123',\n      id: 2,\n    },\n  ];\n\n  public findAll() {\n    const isAuth = this.authService.isAuth();\n    if (!isAuth) {\n      return { message: 'Invalid user' };\n    }\n\n    return this.users;\n  }\n\n  public findOne(id: number) {\n    return this.users.find((user) => user.id === id);\n  }\n\n  public findOneByEmail(email: string) {\n    return this.users.find((user) => user.email === email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts-param.dto.ts\n            \n            class\n            GetPostsParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/users/dtos/create-user.dto.ts\n            \n            type alias\n            UserBody\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/users/dtos/get-users-param.dto.ts\n            \n            type alias\n            UsersParam\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                        \n                            status   (src/.../status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/posts/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        status\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostModule -->\n\nPostsService->PostModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserBody   (src/.../create-user.dto.ts)\n                        \n                        \n                            UsersParam   (src/.../get-users-param.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/dtos/create-user.dto.ts\n    \n    \n        \n            \n                \n                    \n                    UserBody\n                \n            \n            \n                \n                            CreateUserDto\n\n                \n            \n        \n    \n    src/users/dtos/get-users-param.dto.ts\n    \n    \n        \n            \n                \n                    \n                    UsersParam\n                \n            \n            \n                \n                            GetUsersParamDto\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
